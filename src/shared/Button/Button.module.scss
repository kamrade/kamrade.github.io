@use "sass:math";
@import "src/styles/bootstrap/variables";
@import "src/styles/bootstrap/mixins";
@import './ButtonMixins';

.ButtonBase {
  border-radius: $border-radius;
  border: none;
  border-color: transparent;
  display: inline-flex;
  align-items: center;
  font-size: 0.875rem;
  line-height: 1.25rem;
  padding: $buttonPaddingSM-y $buttonPaddingSM-x;
  transition: background .3s ease-in-out;
  background-color: map-get($themes, default);
  color: map-get($themes, defaultText);
  vertical-align: middle;
  position: relative;

  &:not(:disabled):hover {
    background-color: map-get($themes, defaultHover);
  }

  &:not(:disabled):active {
    background-color: map-get($themes, defaultActive);
  }

  &:not(:disabled):focus {
    box-shadow: $focus-shadow;
    outline: none;
  }

  &:disabled {
    opacity: $btn-disabled-opacity;
  }

  // CHILDREN
  .buttonPrefix {
    padding-right: .25em;
    margin-left: -0.25em;
    font-size: 1.2em;
    line-height: 0;
  }

  .buttonSuffix {
    padding-left: .25em;
    margin-right: -0.25em;
    font-size: 1.2em;
    line-height: 0;
  }

  // BLOCK
  &.Block {
    display: block;
    width: 100%;
  }

  &.Bold {
    font-weight: bold;
  }

  // VARIANT

  // THEME
  &.Primary {
    @include btnThemeDraw($theme-pri, $theme-priText, $theme-priHover, $theme-priActive);
  }

  &.Dark {
    @include btnThemeDraw($theme-dark, $theme-darkText, $theme-darkHover, $theme-darkActive);
  }

  &.Text {
    @include btnThemeDraw($theme-text, $theme-textText, $theme-textHover, $theme-textActive);
  }

  &.Link {
    @include btnThemeDraw($theme-link, $theme-linkText, $theme-linkHover, $theme-linkActive);
  }

  &.Success {
    @include btnThemeDraw($theme-success, $theme-successText, $theme-successHover, $theme-successActive);
  }

  &.Danger {
    @include btnThemeDraw($theme-danger, $theme-dangerText, $theme-dangerHover, $theme-dangerActive);
  }

  &.Accent {
    @include btnThemeDraw($theme-accent, $theme-accentText, $theme-accentHover, $theme-accentActive);
  }

  // SIZE
  &.XS {
    @include btnSizeDraw($buttonPaddingXS-y, $buttonPaddingXS-x, $buttonInnerSpacingXS-x, $buttonFontSizeXS, $buttonLineHeightXS);
    &.Wide {
      padding: $buttonPaddingXS-y $buttonPaddingXS-x * 2;
    }
  }

  &.SM {
    @include btnSizeDraw($buttonPaddingSM-y, $buttonPaddingSM-x, $buttonInnerSpacingSM-x, $buttonFontSizeSM, $buttonLineHeightSM);
    &.Wide {
      padding: $buttonPaddingSM-y $buttonPaddingSM-x * 2;
    }
  }

  &.MD {
    @include btnSizeDraw($buttonPaddingMD-y, $buttonPaddingMD-x, $buttonInnerSpacingMD-x, $buttonFontSizeMD, $buttonLineHeightMD);
    &.Wide {
      padding: $buttonPaddingMD-y $buttonPaddingMD-x * 2;
    }
  }

  &.LG {
    @include btnSizeDraw($buttonPaddingLG-y, $buttonPaddingLG-x, $buttonInnerSpacingLG-x, $buttonFontSizeLG, $buttonLineHeightLG);
    &.Wide {
      padding: $buttonPaddingLG-y $buttonPaddingLG-x * 2;
    }
  }

  &.Wide {
    padding: $buttonPaddingSM-y $buttonPaddingSM-x * 2;
  }

  // SHAPE
  &.Square {
    border-radius: 0;
  }

  &.Circle {
    border-radius: (2 * $buttonPaddingSM-y + $buttonLineHeightSM) / 2;

    &.LG {
      border-radius: (2 * $buttonPaddingLG-y + $buttonLineHeightLG) / 2;
    }
    &.MD {
      border-radius: (2 * $buttonPaddingMD-y + $buttonLineHeightMD) / 2;
    }
    &.SM {
      border-radius: (2 * $buttonPaddingSM-y + $buttonLineHeightSM) / 2;
    }
    &.XS {
      border-radius: (2 * $buttonPaddingXS-y + $buttonLineHeightXS) / 2;
    }
  }
  
  &.Loading {
    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      background-color: inherit;
    }
  }
}
